package pingTest;

import java.io.*;
import java.time.format.*;
import java.util.*;

import javafx.animation.*;
import javafx.application.*;
import javafx.concurrent.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.stage.*;
import javafx.util.*;

import pingTest.modal.*;
import pingTest.obj.*;
import pingTest.util.*;

//Based on https://gist.github.com/jewelsea/3388637
//2019/12/28~2020/01/07
public class PingTestScheduler extends Application
{
	// XXX: Windows 환경에 맞춰서 작성했으나 다른 OS에서도 동작하게 하려면 이 부분의 수정이 필요.
	private static final String MAIN_PATH = System.getProperty("user.dir") + "\\";
	private static final String IP_LIST_JSON_FILE_NAME = MAIN_PATH + "ipList.json";
	private static final String CONFIG_FILE_NAME = MAIN_PATH + "config.cfg";
	private static final String OUTPUT_FILE_NAME = MAIN_PATH + "result";
	private static final String OUTPUT_FILE_EXTENSION = ".txt";
	
	/*
	private static final String IP_LIST_JSON_FILE_NAME = "E:\\ipList2.json";
	private static final String CONFIG_FILE_NAME = "E:\\config.cfg";
	private static final String OUTPUT_FILE_NAME = "E:\\result";
	private static final String OUTPUT_FILE_EXTENSION = ".txt";
	*/
	
	
	private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy년 MM월 dd일 a hh시 mm분");
	private ArrayList<PcRoom> pcRoomList;
	private PingTest pt;
	
	private Stage window;
	private Timer timer;
	private Button runButton;
	private TextArea textArea;
	
	private File configFile;
	private File outputFile;
	private Config c;
	
	private Task<Void> task;
	private Thread thread;
	
	private class Timer extends Label
	{
		Timeline timeline;
		
		Timer()
		{
			task = null;
			thread = null;
		}
		
		public void start()
		{
			timeline = new Timeline(
				new KeyFrame(Duration.ZERO, new EventHandler<ActionEvent>()
				{
					@Override
					public void handle(ActionEvent actionEvent)
					{
						Calendar time = Calendar.getInstance();
						String hourString = pad(2, ' ', time.get(Calendar.HOUR) == 0 ? "12" : time.get(Calendar.HOUR) + "");
						String minuteString = pad(2, '0', time.get(Calendar.MINUTE) + "");
						String secondString = pad(2, '0', time.get(Calendar.SECOND) + "");
						String ampmString = time.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";
						setText(ampmString + " " + hourString + ":" + minuteString + ":" + secondString);
						
						if (minuteString.equals("00") && secondString.equals("00") && task == null)
						{
							runTask();
						}
						else if (thread != null)
						{
							if (thread.isAlive() && !window.isShowing())
							{
								thread.interrupt();
							}
							else if (!thread.isAlive())
							{
								runButton.setTextFill(Color.BLACK);
								runButton.setText("바로 실행");
								
								thread = null;
								task = null;
							}
						}
					}}),
				new KeyFrame(new Duration(100)));
			timeline.setCycleCount(Animation.INDEFINITE);
			timeline.play();
			
			return;
		}
		
		public void runTask()
		{
			if (task == null)
			{
				runButton.setTextFill(Color.RED);
				runButton.setText("검사 중");
				
				UtilForFile.renameOutputFile(outputFile, OUTPUT_FILE_NAME, OUTPUT_FILE_EXTENSION);
				
				if (textArea.getLength() > 50000)
				{
					textArea.clear();
				}
				
				task = new Task<Void>()
				{
				    @Override
				    protected Void call() throws Exception
				    {
				    	String totalStr = "";
				    	
				    	for (PcRoom p : pcRoomList)
				    	{
				    		PingTestResult ptr = pt.start(p);
				    		String s = "[" + ptr.getStartTime().format(dtf) + "] " + ptr.getPcRoomName() + " - 가동 PC 수: " + ptr.getTurnOnPcCount() + "/" + ptr.getTotalPcCount() + "(" + (((ptr.getTurnOnPcCount() * 100) / ptr.getTotalPcCount()) + ((ptr.getTurnOnPcCount() * 100) % ptr.getTotalPcCount() == 0 ? 0 : 1)) + "%)" + "\r\n";
				    		totalStr += s;
				    		
				    		Platform.runLater( () -> 
					    	{
					    		textArea.appendText(s);
					    	});
				    	}
				    	
				    	String line = "========================================\r\n";
				    	
				    	Platform.runLater( () -> 
				    	{
				    		textArea.appendText("\r\n" + line + "\r\n");
				    	});
				    	
				    	UtilForFile.fileWriteString(outputFile, totalStr + line);
				    	
				    	return null;
				    }
				};
				
				thread = new Thread(task);
				
				thread.start();
			}
		}
		
		/**
		 * Creates a string left padded to the specified width with the supplied padding
		 * character.
		 * 
		 * @param fieldWidth the length of the resultant padded string.
		 * @param padChar    a character to use for padding the string.
		 * @param s          the string to be padded.
		 * @return the padded string.
		 */
		private String pad(int fieldWidth, char padChar, String s)
		{
			StringBuilder sb = new StringBuilder();
			for (int i = s.length(); i < fieldWidth; i++)
			{
				sb.append(padChar);
			}
			sb.append(s);

			return sb.toString();
		}
	}
	
	private boolean pingTestConfig()
	{
		pcRoomList = UtilForFile.pcRoomListLoad(IP_LIST_JSON_FILE_NAME);
		
		if (pcRoomList == null)
		{
			return false;
		}
		
		configFile = UtilForFile.fileRead(CONFIG_FILE_NAME);
		outputFile = UtilForFile.fileRead(OUTPUT_FILE_NAME + OUTPUT_FILE_EXTENSION);
		
		if (configFile == null || outputFile == null)
		{
			return false;
		}
		
		c = UtilForFile.configFileLoader(configFile);
		
		if (c == null || c.getDelay() < 0 || c.getLimitTime() < 0 || c.getMaxThreads() < 0)
		{
			return false;
		}
		else
		{
			timer = new Timer();
			pt = new PingTest(c);
		}
		
		return true;
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception
	{
		window = primaryStage;
		
		if (!pingTestConfig())
		{
			return;
		}
		
		GridPane gridPane = new GridPane();
		
		HBox hBox1 = new HBox();
		hBox1.setMinWidth(280);
		hBox1.setAlignment(Pos.CENTER_LEFT);
		hBox1.setPadding(new Insets(10, 10, 10, 10));
		hBox1.getChildren().addAll(new Label("현재 시각: "), timer);
		
		HBox hBox2 = new HBox();
		hBox2.setMinWidth(280);
		hBox2.setAlignment(Pos.CENTER_RIGHT);
		hBox2.setPadding(new Insets(10, 10, 10, 10));
		
		runButton = new Button("바로 실행");
		runButton.setOnAction(e -> 
		{
			timer.runTask();
		});
		
		hBox2.getChildren().add(runButton);
		
		textArea = new TextArea();
		textArea.setEditable(false);
		textArea.setMinHeight(340);
		textArea.setMaxWidth(590);
		
		gridPane.add(hBox1, 0, 0, 1, 1);
		gridPane.add(hBox2, 1, 0, 1, 1);
		gridPane.add(textArea, 0, 1, 2, 1);
		
		gridPane.setPadding(new Insets(10, 10, 10, 10));
		gridPane.setMinWidth(580);
		gridPane.setMinHeight(380);
		
		Scene scene = new Scene(gridPane, 600, 400);
		
		timer.start();
		
		window.setTitle("핑 테스트 프로그램");
		window.setResizable(false);
		window.setScene(scene);
		window.show();
		
		window.setOnCloseRequest(e ->
		{
			e.consume();
			if (ConfirmBox.display("프로그램 종료", "프로그램을 종료합니까?"))
			{
				UtilForFile.configFileSave(configFile, c);
				window.close();
			}
		});
	}

	public static void main(String args[])
	{
		launch(args);
	}
}
