package pingTest;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.atomic.*;

import javafx.animation.*;
import javafx.application.*;
import javafx.concurrent.*;
import javafx.event.*;
import javafx.geometry.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.*;
import javafx.util.*;

import pingTest.modal.*;
import pingTest.util.*;

//Based on https://gist.github.com/jewelsea/3388637
//2019/12/28
public class Scheduler extends Application
{
	@Override
	public void start(Stage primaryStage) throws Exception
	{
		GridPane gridPane = new GridPane();
		
		Label label1 = new Label("다음 검사 시간까지 ");
		Timer timer = new Timer();
		
		HBox hBox1 = new HBox();
		hBox1.setPadding(new Insets(10, 10, 10, 10));
		hBox1.getChildren().addAll(new Label("다음 검사 시간까지 "), timer);
		
		gridPane.add(hBox1, 0, 0, 1, 1);
		
		Label label2 = new Label("");
		
		VBox vBox = new VBox();
		
		
		
		Scene scene = new Scene(hBox1, 600, 400);
		
		timer.start();
		
		primaryStage.setTitle("핑 테스트 프로그램");
		primaryStage.setResizable(false);
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	public static void main(String args[])
	{
		launch(args);
	}
}

class Timer extends Label
{
	private int defaultHour = 0;
	private int defaultMinute = 0;
	private int defaultSecond = 15;
	
	private int hour = defaultHour;
	private int minute = defaultMinute;
	private int second = defaultSecond;
	
	private boolean isStart = false;
	
	Timeline timeline;
	
	Timer()
	{
		
	}
	
	public void start()
	{
		if (isStart)
		{
			AlertBox.display("오류", "타이머가 이미 생성됐습니다.");
			return;
		}
		
		isStart = true;
		second++; // XXX: 프로그램 첫 시작 시 처음 1초가 이미 지난 채로 실행되는 부분이 아쉬워서 편법을 가함.
		
		timeline = new Timeline(
			new KeyFrame(Duration.ZERO, new EventHandler<ActionEvent>()
			{
				@Override
				public void handle(ActionEvent actionEvent)
				{
					second--;
					if (second < 0)
					{
						if (hour == 0 && minute == 0)
						{
							timeline.pause();
							
							// https://docs.oracle.com/javafx/2/threads/jfxpub-threads.htm
							Task<Void> task = new Task<Void>()
							{
							    @Override
							    protected Void call() throws Exception
							    {
							    	PingTest.start();
							    	return null;
							    }
							};
							
							task.run();
							
							hour = defaultHour;
							minute = defaultMinute;
							second = defaultSecond;
							
							timeline.play();
						}
						else
						{
							second += 60;
							minute--;
							
							if (minute < 0)
							{
								minute += 60;
								hour--;
							}
						}
					}
					
					String hourString = StringUtilities.pad(2, '0', hour + "");
					String minuteString = StringUtilities.pad(2, '0', minute + "");
					String secondString = StringUtilities.pad(2, '0', second + "");
					
					setText(hourString + ":" + minuteString + ":" + secondString);
				}}),
			new KeyFrame(new Duration(1000)));
		timeline.setCycleCount(Animation.INDEFINITE);
		timeline.play();
		
		return;
	}
}

class PingTest
{
	private static final int MAX_THREADS = 50;
	private static final int LIMIT_TIME = 1000;
	private static final int DELAY = 1100;
	private static AtomicInteger threadsCounter;
	private static AtomicInteger result;
	private static AtomicInteger remain;

	static class PingTestThread extends Thread
	{
		String ip;

		public PingTestThread(String ip)
		{
			this.ip = ip;
		}

		public void run()
		{
			if (threadsCounter.get() >= PingTest.MAX_THREADS)
			{
				try
				{
					Thread.sleep(DELAY);
				}
				catch (Exception e)
				{
					System.out.println("Thread error in PingTestThread.run()");
				}
				this.run();
				
				return;
			}

			threadsCounter.set(threadsCounter.get() + 1);
			try
			{
				sendPingRequest(this.ip);
			}
			catch (Exception e)
			{
				System.out.println("And error occured for " + this.ip);
			}
			finally
			{
				threadsCounter.set(threadsCounter.get() - 1);
			}
			
			return;
		}
	}
	
	// Sends ping request to a provided IP address
	private static void sendPingRequest(String ip)
			throws UnknownHostException, IOException
	{
		if (ip.matches("(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))"))
		{
			try
			{
				InetAddress ping = InetAddress.getByName(ip);
				System.out.println("Sending Ping Request to " + ip);
				
				if (ping.isReachable(LIMIT_TIME))
				{
					System.out.println(ip + ": Host is reachable");
					result.set(result.get() + 1);
				}
				else
				{
					System.out.println(ip + ": Sorry! We can't reach to this host");
				}
				
				remain.set(remain.get() - 1);
			}
			catch (UnknownHostException uhe)
			{
				System.out.println("UnknownHostException from PingTest.sendPingRequest()");
			}
			catch (IOException ie)
			{
				System.out.println("IOException from PingTest.sendPingRequest()");
			}
			catch (IllegalArgumentException iae)
			{
				System.out.println("IllegalArgumentException from PingTest.sendPingRequest()");
			}
		}
		else
		{
			System.out.println("Illegal IPv4 Address");
		}
		
		return;
	}

	static int start()
	{
		long start = System.currentTimeMillis();
		
		threadsCounter = new AtomicInteger();
		result = new AtomicInteger();
		
		ArrayList<String> realIpList = new ArrayList<String>();
		
		for (int i = 131; i < 241; i++)
		{
			realIpList.add("121.130.5." + i);
		}
		
		remain = new AtomicInteger(realIpList.size());
		
		for (String ip : realIpList)
		{
			PingTestThread mt = new PingTestThread(ip);
			Thread t = new Thread(mt);

			t.start();
		}
		
		while (remain.get() > 0)
		{
			try
			{
				Thread.sleep(100);
			}
			catch (InterruptedException e)
			{
				System.out.println("Thread error in PingTest.start()");
			}
		}
		
		System.out.println("현재 가동 중인 PC 수: " + result);
		
		long time = System.currentTimeMillis() - start;
		
		System.out.println("검사 시간: " + time / 1000 + "." + time % 1000 + "초");
		
		return result.get();
	}
}
